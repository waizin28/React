{"ast":null,"code":"var _jsxFileName = \"/Users/waizinlinn/Desktop/Spring/React/HW/hw6/hw6-waizin28/src/components/content/BadgerChatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport BadgerMessage from \"./BadgerMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BadgerChatroom(props) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const loadMessages = () => {\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      headers: {\n        \"X-CS571-ID\": \"bid_00000000000000000000\"\n      }\n    }).then(res => res.json()).then(json => {\n      setMessages(json.messages);\n    });\n  };\n  useEffect(() => {\n    loadMessages();\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [props.name, \" Chatroom\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), messages.map(message => {\n      return /*#__PURE__*/_jsxDEV(BadgerMessage, {\n        id: message.id,\n        title: message.title,\n        poster: message.poster,\n        content: message.content,\n        created: message.created\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this);\n    })\n    /* TODO: Complete displaying of messages. */, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), messages.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are no messages in this chatroom yet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n}\n_s(BadgerChatroom, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = BadgerChatroom;\nvar _c;\n$RefreshReg$(_c, \"BadgerChatroom\");","map":{"version":3,"names":["React","useEffect","useState","BadgerMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","BadgerChatroom","props","_s","messages","setMessages","loadMessages","fetch","name","headers","then","res","json","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","id","title","poster","content","created","length","_c","$RefreshReg$"],"sources":["/Users/waizinlinn/Desktop/Spring/React/HW/hw6/hw6-waizin28/src/components/content/BadgerChatroom.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport BadgerMessage from \"./BadgerMessage\";\nexport default function BadgerChatroom(props) {\n  const [messages, setMessages] = useState([]);\n\n  const loadMessages = () => {\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      headers: {\n        \"X-CS571-ID\": \"bid_00000000000000000000\",\n      },\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        setMessages(json.messages);\n      });\n  };\n\n  useEffect(() => {\n    loadMessages();\n  }, [props]);\n\n  return (\n    <>\n      <h1>{props.name} Chatroom</h1>\n      {\n        messages.map((message) => {\n          return (\n            <BadgerMessage\n              id={message.id}\n              title={message.title}\n              poster={message.poster}\n              content={message.content}\n              created={message.created}\n            ></BadgerMessage>\n          );\n        })\n        /* TODO: Complete displaying of messages. */\n      }\n      <hr />\n      {messages.length > 0 ? (\n        <>{/* TODO: Complete displaying of messages. */}</>\n      ) : (\n        <>\n          <p>There are no messages in this chatroom yet!</p>\n        </>\n      )}\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC5C,eAAe,SAASC,cAAcA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,YAAY,GAAGA,CAAA,KAAM;IACzBC,KAAK,CAAE,0CAAyCL,KAAK,CAACM,IAAK,WAAU,EAAE;MACrEC,OAAO,EAAE;QACP,YAAY,EAAE;MAChB;IACF,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEE,IAAI,IAAK;MACdP,WAAW,CAACO,IAAI,CAACR,QAAQ,CAAC;IAC5B,CAAC,CAAC;EACN,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdY,YAAY,EAAE;EAChB,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,oBACEJ,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA;MAAAe,QAAA,GAAKX,KAAK,CAACM,IAAI,EAAC,WAAS;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAE5Bb,QAAQ,CAACc,GAAG,CAAEC,OAAO,IAAK;MACxB,oBACErB,OAAA,CAACF,aAAa;QACZwB,EAAE,EAAED,OAAO,CAACC,EAAG;QACfC,KAAK,EAAEF,OAAO,CAACE,KAAM;QACrBC,MAAM,EAAEH,OAAO,CAACG,MAAO;QACvBC,OAAO,EAAEJ,OAAO,CAACI,OAAQ;QACzBC,OAAO,EAAEL,OAAO,CAACK;MAAQ;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACV;IAErB,CAAC;IACD,2DAEFnB,OAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,EACLb,QAAQ,CAACqB,MAAM,GAAG,CAAC,gBAClB3B,OAAA,CAAAE,SAAA,oBAAmD,gBAEnDF,OAAA,CAAAE,SAAA;MAAAa,QAAA,eACEf,OAAA;QAAAe,QAAA,EAAG;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI,iBAErD;EAAA,gBACA;AAEP;AAACd,EAAA,CA9CuBF,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}