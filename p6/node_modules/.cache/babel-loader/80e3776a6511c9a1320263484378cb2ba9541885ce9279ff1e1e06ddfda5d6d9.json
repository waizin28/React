{"ast":null,"code":"var _jsxFileName = \"/Users/waizinlinn/Desktop/Spring/React/HW/hw6/hw6-waizin28/src/components/content/BadgerChatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useCallback, useMemo } from \"react\";\nimport BadgerMessage from \"./BadgerMessage\";\nimport isLoggedInContext from \"../../contexts/isLoggedInContext\";\nimport { Form, Button } from \"react-bootstrap\";\nimport privateIdContext from \"../../contexts/privateIdContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BadgerChatroom(props) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const {\n    isLoggedIn\n  } = useContext(isLoggedInContext);\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postContent, setPostContent] = useState(\"\");\n  const [privateId, setPrivateId] = useState([]);\n  const loadMessages = useCallback(() => {\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\"\n      }\n    }).then(res => res.json()).then(json => {\n      setMessages(json.messages);\n    });\n  }, [props.name]);\n  const postSubmit = e => {\n    e.preventDefault();\n    console.log(\"Post submit triggered\");\n    if (!postTitle || !postContent) {\n      alert(\"You must provide both a title and content!\");\n      return;\n    }\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      method: \"POST\",\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\",\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        title: postTitle,\n        content: postContent\n      })\n    }).then(res => {\n      if (res.status === 200) {\n        alert(\"Successfully posted!\");\n        setPostTitle(\"\");\n        setPostContent(\"\");\n      }\n      return res.json();\n    }).then(data => {\n      console.log(\"Private IDs \" + privateId);\n      const newData = JSON.stringify(data[\"id\"]);\n      setPrivateId(...privateId, newData);\n      setMessages([...messages, {\n        id: JSON.stringify(data[\"id\"]),\n        title: postTitle,\n        content: postContent\n      }]);\n      loadMessages();\n    });\n  };\n  useEffect(() => {\n    loadMessages();\n  }, [props, loadMessages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [props.name, \" Chatroom\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: postSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          style: {\n            marginBottom: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Post Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter chat title\",\n            value: postTitle,\n            onChange: e => {\n              setPostTitle(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          style: {\n            marginBottom: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Post Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter chat content\",\n            value: postContent,\n            onChange: e => {\n              setPostContent(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Create Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You must be logged in to post!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), messages.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: messages.map(message => {\n        return /*#__PURE__*/_jsxDEV(privateIdContext.Provider, {\n          value: [privateId, setPrivateId],\n          children: /*#__PURE__*/_jsxDEV(BadgerMessage, {\n            id: message.id,\n            title: message.title,\n            poster: message.poster,\n            content: message.content,\n            created: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are no messages in this chatroom yet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n}\n_s(BadgerChatroom, \"TeY8GchCYK+wOcitSECMplj2E30=\");\n_c = BadgerChatroom;\nvar _c;\n$RefreshReg$(_c, \"BadgerChatroom\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useCallback","useMemo","BadgerMessage","isLoggedInContext","Form","Button","privateIdContext","jsxDEV","_jsxDEV","Fragment","_Fragment","BadgerChatroom","props","_s","messages","setMessages","isLoggedIn","postTitle","setPostTitle","postContent","setPostContent","privateId","setPrivateId","loadMessages","fetch","name","headers","then","res","json","postSubmit","e","preventDefault","console","log","alert","method","credentials","body","JSON","stringify","title","content","status","data","newData","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","style","marginBottom","Label","Control","type","placeholder","value","onChange","target","variant","length","map","message","Provider","poster","created","_c","$RefreshReg$"],"sources":["/Users/waizinlinn/Desktop/Spring/React/HW/hw6/hw6-waizin28/src/components/content/BadgerChatroom.js"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useContext,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport BadgerMessage from \"./BadgerMessage\";\nimport isLoggedInContext from \"../../contexts/isLoggedInContext\";\nimport { Form, Button } from \"react-bootstrap\";\nimport privateIdContext from \"../../contexts/privateIdContext\";\n\nexport default function BadgerChatroom(props) {\n  const [messages, setMessages] = useState([]);\n  const { isLoggedIn } = useContext(isLoggedInContext);\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postContent, setPostContent] = useState(\"\");\n  const [privateId, setPrivateId] = useState([]);\n\n  const loadMessages = useCallback(() => {\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\",\n      },\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        setMessages(json.messages);\n      });\n  }, [props.name]);\n\n  const postSubmit = (e) => {\n    e.preventDefault();\n\n    console.log(\"Post submit triggered\");\n\n    if (!postTitle || !postContent) {\n      alert(\"You must provide both a title and content!\");\n      return;\n    }\n\n    fetch(`https://cs571.org/s23/hw6/api/chatroom/${props.name}/messages`, {\n      method: \"POST\",\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        title: postTitle,\n        content: postContent,\n      }),\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          alert(\"Successfully posted!\");\n          setPostTitle(\"\");\n          setPostContent(\"\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        console.log(\"Private IDs \" + privateId);\n        const newData = JSON.stringify(data[\"id\"]);\n        setPrivateId(...privateId, newData);\n        setMessages([\n          ...messages,\n          {\n            id: JSON.stringify(data[\"id\"]),\n            title: postTitle,\n            content: postContent,\n          },\n        ]);\n        loadMessages();\n      });\n  };\n\n  useEffect(() => {\n    loadMessages();\n  }, [props, loadMessages]);\n\n  return (\n    <>\n      <h1>{props.name} Chatroom</h1>\n      {isLoggedIn ? (\n        <>\n          <Form onSubmit={postSubmit}>\n            <Form.Group style={{ marginBottom: \"1rem\" }}>\n              <Form.Label>Post Title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter chat title\"\n                value={postTitle}\n                onChange={(e) => {\n                  setPostTitle(e.target.value);\n                }}\n              />\n            </Form.Group>\n\n            <Form.Group style={{ marginBottom: \"1rem\" }}>\n              <Form.Label>Post Content</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter chat content\"\n                value={postContent}\n                onChange={(e) => {\n                  setPostContent(e.target.value);\n                }}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Create Post\n            </Button>\n          </Form>\n        </>\n      ) : (\n        <p>You must be logged in to post!</p>\n      )}\n      <hr />\n      {messages.length > 0 ? (\n        <>\n          {messages.map((message) => {\n            return (\n              <privateIdContext.Provider\n                key={message.id}\n                value={[privateId, setPrivateId]}\n              >\n                <BadgerMessage\n                  id={message.id}\n                  title={message.title}\n                  poster={message.poster}\n                  content={message.content}\n                  created={message}\n                ></BadgerMessage>\n              </privateIdContext.Provider>\n            );\n          })}\n        </>\n      ) : (\n        <>\n          <p>There are no messages in this chatroom yet!</p>\n        </>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}