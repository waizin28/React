{"ast":null,"code":"var _jsxFileName = \"/Users/waizinlinn/Desktop/Spring/React/HW/hw5/hw5-waizin28/src/components/AllSongs.jsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState, useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport BadgerBeatsFavoritesContext from \"../contexts/BadgerBeatsFavoritesContext\";\nimport Song from \"./Song\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllSongs = props => {\n  _s();\n  const [favorites, setFavorites] = useContext(BadgerBeatsFavoritesContext);\n  const [songs, setSongs] = useState([]);\n  //   const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://cs571.org/s23/hw5/api/songs\", {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\"\n      }\n    }).then(data => data.json()).then(songData => {\n      setSongs(songData);\n      console.log(songData);\n    });\n  }, []);\n  const uniqueGenre = [...new Set(songs.map(song => song[\"genre\"]))];\n  const totalTime = songs.reduce((prevSongTime, curSongTime) => {\n    let time = curSongTime[\"length\"].split(\":\");\n    let seconds = parseInt(time[1]);\n    let minCovert = parseInt(time[0]) * 60;\n    return prevSongTime + minCovert + seconds;\n  }, 0);\n\n  //   const buttonStatus = (buttonChange) => {\n  //     console.log(\"Inside button status\");\n  //     console.log(buttonChange);\n  //     setActive(buttonChange);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"We have \", songs.length, \" songs in \", uniqueGenre.length, \" genres for a total of \", totalTime, \" seconds of music!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: songs.map(songData => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 3,\n            xl: 2,\n            children: /*#__PURE__*/_jsxDEV(Song, {\n              song: songData\n            }, songData.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AllSongs, \"/ftF9x+9X4gC4F04NzQlxiN6OxE=\");\n_c = AllSongs;\nexport default AllSongs;\nvar _c;\n$RefreshReg$(_c, \"AllSongs\");","map":{"version":3,"names":["useContext","useState","useEffect","Col","Container","Row","BadgerBeatsFavoritesContext","Song","jsxDEV","_jsxDEV","AllSongs","props","_s","favorites","setFavorites","songs","setSongs","fetch","headers","then","data","json","songData","console","log","uniqueGenre","Set","map","song","totalTime","reduce","prevSongTime","curSongTime","time","split","seconds","parseInt","minCovert","children","fileName","_jsxFileName","lineNumber","columnNumber","length","fluid","xs","sm","md","lg","xl","id","_c","$RefreshReg$"],"sources":["/Users/waizinlinn/Desktop/Spring/React/HW/hw5/hw5-waizin28/src/components/AllSongs.jsx"],"sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport BadgerBeatsFavoritesContext from \"../contexts/BadgerBeatsFavoritesContext\";\nimport Song from \"./Song\";\n\nconst AllSongs = (props) => {\n  const [favorites, setFavorites] = useContext(BadgerBeatsFavoritesContext);\n  const [songs, setSongs] = useState([]);\n  //   const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://cs571.org/s23/hw5/api/songs\", {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\",\n      },\n    })\n      .then((data) => data.json())\n      .then((songData) => {\n        setSongs(songData);\n        console.log(songData);\n      });\n  }, []);\n\n  const uniqueGenre = [...new Set(songs.map((song) => song[\"genre\"]))];\n\n  const totalTime = songs.reduce((prevSongTime, curSongTime) => {\n    let time = curSongTime[\"length\"].split(\":\");\n    let seconds = parseInt(time[1]);\n    let minCovert = parseInt(time[0]) * 60;\n    return prevSongTime + minCovert + seconds;\n  }, 0);\n\n  //   const buttonStatus = (buttonChange) => {\n  //     console.log(\"Inside button status\");\n  //     console.log(buttonChange);\n  //     setActive(buttonChange);\n  //   };\n\n  return (\n    <div>\n      <h1>Songs</h1>\n      <p>\n        We have {songs.length} songs in {uniqueGenre.length} genres for a total\n        of {totalTime} seconds of music!\n      </p>\n      <Container fluid>\n        <Row>\n          {songs.map((songData) => {\n            return (\n              <Col xs={12} sm={6} md={4} lg={3} xl={2}>\n                <Song\n                  song={songData}\n                  key={songData.id}\n                  //   move={move}\n                ></Song>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default AllSongs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}