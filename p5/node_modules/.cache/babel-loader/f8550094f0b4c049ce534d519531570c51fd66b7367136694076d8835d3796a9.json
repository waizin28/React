{"ast":null,"code":"var _jsxFileName = \"/Users/waizinlinn/Desktop/Spring/React/HW/hw5/hw5-waizin28/src/components/AllSongs.jsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState, useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport BadgerBeatsFavoritesContext from \"../contexts/BadgerBeatsFavoritesContext\";\nimport Song from \"./Song\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllSongs = props => {\n  _s();\n  const [favorites, setFavorites] = useContext(BadgerBeatsFavoritesContext);\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    fetch(\"https://cs571.org/s23/hw5/api/songs\", {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\"\n      }\n    }).then(data => data.json()).then(songData => {\n      setSongs(songData);\n      const totalTime = songs.reduce((prevSongTime, curSongTime) => {\n        let time = curSongTime[\"length\"].split(\":\");\n        let seconds = parseInt(time[1]);\n        let minCovert = parseInt(time[0]) * 60;\n        console.log(prevSongTime);\n        return prevSongTime + minCovert + seconds;\n      });\n      console.log(totalTime);\n      console.log(songData);\n    });\n  }, []);\n  const uniqueGenre = [...new Set(songs.map(song => song[\"genre\"]))];\n  const totalTime = songs.reduce((prevTime, curTime) => {\n    let time = curTime[\"length\"].split(\":\");\n    return prevTime + parseInt(time[0]) * 60 + parseInt(time[1]);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"We have \", songs.length, \" songs in \", uniqueGenre.length, \" genres for a total of \", totalTime, \" seconds of music!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: songs.map(songData => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 3,\n            xl: 2,\n            children: /*#__PURE__*/_jsxDEV(Song, {\n              song: songData\n            }, songData.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AllSongs, \"/ftF9x+9X4gC4F04NzQlxiN6OxE=\");\n_c = AllSongs;\nexport default AllSongs;\nvar _c;\n$RefreshReg$(_c, \"AllSongs\");","map":{"version":3,"names":["useContext","useState","useEffect","Col","Container","Row","BadgerBeatsFavoritesContext","Song","jsxDEV","_jsxDEV","AllSongs","props","_s","favorites","setFavorites","songs","setSongs","fetch","headers","then","data","json","songData","totalTime","reduce","prevSongTime","curSongTime","time","split","seconds","parseInt","minCovert","console","log","uniqueGenre","Set","map","song","prevTime","curTime","children","fileName","_jsxFileName","lineNumber","columnNumber","length","fluid","xs","sm","md","lg","xl","id","_c","$RefreshReg$"],"sources":["/Users/waizinlinn/Desktop/Spring/React/HW/hw5/hw5-waizin28/src/components/AllSongs.jsx"],"sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport BadgerBeatsFavoritesContext from \"../contexts/BadgerBeatsFavoritesContext\";\nimport Song from \"./Song\";\n\nconst AllSongs = (props) => {\n  const [favorites, setFavorites] = useContext(BadgerBeatsFavoritesContext);\n  const [songs, setSongs] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://cs571.org/s23/hw5/api/songs\", {\n      headers: {\n        \"X-CS571-ID\": \"bid_d5f87cfbd68cea89ba78\",\n      },\n    })\n      .then((data) => data.json())\n      .then((songData) => {\n        setSongs(songData);\n        const totalTime = songs.reduce((prevSongTime, curSongTime) => {\n          let time = curSongTime[\"length\"].split(\":\");\n          let seconds = parseInt(time[1]);\n          let minCovert = parseInt(time[0]) * 60;\n          console.log(prevSongTime);\n          return prevSongTime + minCovert + seconds;\n        });\n        console.log(totalTime);\n\n        console.log(songData);\n      });\n  }, []);\n\n  const uniqueGenre = [...new Set(songs.map((song) => song[\"genre\"]))];\n\n  const totalTime = songs.reduce((prevTime, curTime) => {\n    let time = curTime[\"length\"].split(\":\");\n    return prevTime + parseInt(time[0]) * 60 + parseInt(time[1]);\n  });\n\n  return (\n    <div>\n      <h1>Songs</h1>\n      <p>\n        We have {songs.length} songs in {uniqueGenre.length} genres for a total\n        of {totalTime} seconds of music!\n      </p>\n      <Container fluid>\n        <Row>\n          {songs.map((songData) => {\n            return (\n              <Col xs={12} sm={6} md={4} lg={3} xl={2}>\n                <Song song={songData} key={songData.id}></Song>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default AllSongs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}